/*
 * The Clear BSD License
 * 
 * Copyright (c) 2023 XXIV
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted (subject to the limitations in the disclaimer
 * below) provided that the following conditions are met:
 * 
 *      * Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * 
 *      * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 * 
 *      * Neither the name of the copyright holder nor the names of its
 *      contributors may be used to endorse or promote products derived from this
 *      software without specific prior written permission.
 * 
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
 * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
module mocha;

enum Error : int
{
    NONE,
    MISSING_FIELD,
    DUPLICATE_FIELD,
    ROOT_REFERENCE,
    OUT_OF_MEMORY,
    INVALID_CHARACTER,
    OVERFLOW,
    END_OF_STREAM,
    UNEXPECTED_TOKEN,
    UNEXPECTED_CHARACTER
}

enum ValueType : int
{
    NIL,
    STRING,
    REFERENCE,
    BOOLEAN,
    OBJECT,
    ARRAY,
    FLOAT,
    INTEGER
}

struct Reference
{
  char* name;
  usz name_len;
  void* child;
  usz index;
}

struct Array
{
  void* items;
  usz items_len;
}

struct Object
{
  void* fields;
  usz fields_len;
}

union Value
{
  std::core::string::ZString string;
  Reference reference;
  int boolean;
  Object object;
  Array array;
  double float64;
  long integer64;
}

struct Field
{
  std::core::string::ZString name;
  Value value;
  ValueType type;
}

fn Error parse(Object* object, char* src) @extern("mocha_parse");

fn Error nparse(Object* object, char* src, usz len) @extern("mocha_nparse");

fn void Object.deinit(Object* object) @extern("mocha_deinit");

fn Field Object.field(Object* object, usz index) @extern("mocha_field");

fn ValueType Array.array(Array* array, Value* value, usz index) @extern("mocha_array");

fn int Reference.next(Reference* reference) @extern("mocha_reference_next");
